
除了Thread本身以外，在ANdroid中可以扮演线程角色的还有很多，比如：
AsyncTask，HandlerThread，和IntentService等都可以充当线程。

一、AsyncTask
    AsyncTask是一种轻量级的异步任务类，它可以在线程池中执行后台任务，然后把执行的进度
和最终结果传递给主线程并在主线程中更新UI。
    从实现上来说，AsyncTask封装了Thread和Handler，通过AsyncTask可以更加方便的执行后台
任务以及在主线程中访问UI，但是AsyncTask并不适合进行特别耗时的后台任务，对于特别耗时
的任务来说，建议使用线程池。

AsyncTask在具体的使用过程中有一些限制条件：
（1）AsyncTask的类必须在主线程中加载，这就意味着第一次访问AsyncTask必须发生在主线程，当然
     这个过程在Android 4.1及以上的版本中以及被系统自动完成。在Android 5.0的源码中，可以
     看到ActivityThread的main方法，它会调用AsyncTask的init方法，这就满足了AsyncTask的类
     必须在主线程中进行加载这个条件了。
（2）AsyncTask的对象必须在主线程中创建。
（3）execute方法必须在UI线程调用。
（4）不要在程序中直接调用onPreExecute(),onPostExecute、doInBackground和onProgressUpdate方法。
（5）一个AsyncTask对象只能执行一次，即只能调用一次execute方法，否则会报运行时异常。
（6）在Android 1.6之前，AsyncTask是串行执行任务的，Android 1.6的时候AsyncTask开始采用线程池
    里处理并行任务，但是从Android 3.0开始，为了避免AsyncTask所带来的并发错误，AsyncTask又采用
    一个线程来串行执行任务了。尽管如此，在Android 3.0及以后的版本中，我们任然可以通过AsyncTask
    的executeOnExecutor方法来并行的执行任务。

 自己分析AsyncTask源码。

二、HandlerThread
    HandlerThread继承了Thread，它是一种可以使用Handler的Thread，它的实现也很简单，就是在run方法中通过
Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许在HandlerThread
中创建Handler了。

    从HandlerThread的实现来看，它和普通的Thread有显著的不同之处。普通Thread主要用于在run方法中执行一个耗时
任务，而HandlerThread在内部创建了消息队列，外界需要通过Handler的消息方式来通知HandlerThread执行一个具体的
任务。

    由于HandlerThread的run方法是一个无限循环，因此当明确不需要再使用HandlerThread时，可以通过它的quit或者
quitSafely方法来终止线程的执行。这是一个良好的编程习惯。

三、IntentService
    IntentService是一种特殊的Service，它继承了Service并且他是一个抽象类，因此必须创建它的子类才能使用IntentService。
    IntentService可用于执行后台耗时任务，当任务执行完成后它会自动停止，同时由于IntentService是服务的原因，
这导致它的优先级比单纯的线程要高很多，所以IntentService比较适合执行一些高优先级的后台任务，因为它优先级高
不容易被系统杀死。
    IntentService内部封装了HandlerThread和Handler。
    IntentService的onHandleIntent方法是一个抽象方法，它需要我们在子类中实现，它的作用是从Intent参数中区分
具体的任务并执行这些任务。如果目前只存在一个后台任务，那么onHandleIntent方法执行完这个任务后，stopSelf(int startId)
就会直接停止服务；如果目前存在多个后台任务，那么当onHandleIntent方法执行完最后一个任务时，stopSelf(int startId)才
会直接停止服务。
    由于每执行一个后台任务就必须启动一个IntentService，而IntentService内部则通过消息的方式向HandlerThread请求
执行任务，Handler中的Looper是顺序处理消息的，这就意味着IntentService也是顺序执行后台任务的，当有多个后台
任务存在时，这些后台任务会按照外界发起的顺序排队执行（依次执行）。

四、Android中的线程池
1、线程池的好处：
    （1）重用线程池中的线程，避免因为线程的创建和销毁所带来的性能开销。
    （2）能有效控制线程池的最大并发数，避免大量的线程之间因互相枪占系统资源而导致的阻塞现象。
    （3）能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。

2、由于Android中的线程池都是直接或者间接通过配置ThreadPoolExecutor来实现的，因此首先来介绍一下ThreadPoolExecutor类。
    ThreadPoolExecutor是线程池的真正实现，它的构造方法提供了一系列参数来配置线程池，下面介绍ThreadPoolExecutor
    的构造方法中各个参数的含义，这些参数将会直接影响到线程池的功能特性：
        public ThreadPoolExecutor(int corePoolSize,
                                  int maximumPoolSize,
                                  long keepAliveTime,
                                  TimeUnit unit,
                                  BlockingQueue<Runnable> workQueue,
                                  ThreadFactory threadFactory)
    参数
    corePoolSize：线程池的核心线程数，默认情况下，核心线程会在线程池中一直存活，即使他们处于闲置状态。如果将
                ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true，那么闲置的核心线程在等待新任务
                到来时会有超时策略，这个时间间隔由keepAliveTime所指定，当等待时间超过keepAliveTime所指定的
                时长后，核心线程就会被终止。
    maximumPoolSize：线程池所能容纳的最大线程数，当活动线程数达到这个数值后，后续的新任务将会被阻塞。
    keepAliveTime：非核心线程限制时的超时时长，超过这个时长，非核心线程就会被回收。当ThreadPoolExecutor的
                  allowCoreThreadTimeOut属性设置为true时，keepAliveTime同样会作用于核心线程。
    unit：用于指定keepAliveTime参数的时间单位，这是一个枚举，常用的有TimeUnit.MILLISECONDS(毫秒)、TimeUnit.SECONDS(秒)
          以及TimeUnit.MINUTES(分钟)等。
    workQueue：线程池中的任务队列，通过线程池的execute方法提交的Runnable对象会存储在这个参数中。
    threadFactory：线程工厂，为线程池提供创建新线程的功能。
                   ThreadFactory是一个接口，它只有一个方法：Thread newThread(Runnable r)。

    除了上面的这些主要参数外，ThreadPoolExecutor还有一个不常用的参数RejectedExecutionHandler handler。当线程池
    无法执行新任务时，这可能是由于任务队列已满或者是无法成功执行任务，这个时候ThreadPoolExecutor会调用handler
    的rejectedExecution方法来通知调用者，默认情况下rejectedExecution方法会直接抛出一个RejectedExecutionException
    异常。ThreadPoolExecutor为RejectedExecutionHandler提供了几个可选值：CallerRunsPolicy、AbortPolicy、
    DiscardPolicy和DiscardOldestPolicy，其中AbortPolicy是默认值，它会直接抛出RejectedExecutionException，由于
    handler这个参数不常用，这里就不在具体介绍了。

3、ThreadPoolExecutor执行任务时大致遵循如下规则：
    （1）如果线程池中的线程数量未达到核心线程的数量，那么会直接启动一个核心线程来执行任务。
    （2）如果线程池中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。
    （3）如果在步骤（2）中无法将任务插入到任务队列中，这往往是由于任务队列已满，这个时候如果线程数量未达到线程池
    规定的最大值，那么会立刻启动一个非核心线程来执行任务。
    （4）如果步骤3中线程数量已经达到线程池规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用RejectedExecutionHandler
    的rejectedExecution方法来通知调用者。

4、线程池的分类：
    Android中最常见的四类具有不同功能特性的线程池，他们都直接或间接地通过配置ThreadPoolExecutor来实现自己的
功能特性，这四类线程池分别是FixedThreadPool、CacheThreadPool、ScheduledThreadPool以及SingleThreadExecutor。

（1）FixedThreadPool：
    通过Executors的newFixedThreadPool方法来创建。它是一种线程数量固定的线程池，当线程处于闲置空闲状态时，
 他们并不会被回收，除非线程池被关闭了。当所有的线程都处于活动状态时，新任务都会处于等待状态，直到有线程空闲出来。
 由于FixedThreadPool只有核心线程并且这些核心线程不会被回收，这意味着它能够更加快速地响应外界的请求。newFixedThreadPool
 方法的实现如下，可以发现FixedThreadPool中只有核心线程并且这些核心线程没有超时机制，另外任务队列也是没有大小限制的。
    public static ExecutorService newFixedThreadPool(int nThreads){
        return new ThreadPoolExecutor(nThreads,nThreads,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
    }

（2）CacheThreadPool：
    通过Executors的newCacheThreadPool方法来创建。它是一种线程数量不定的线程池，它只有非核心线程，并且其最大线程
数为Integer.MAX_VALUE。由于Integer.MAX_VALUE是一个很大的数，实际上就相当于最大线程数可以任意打。当线程池
中的线程都处于活动状态时，线程池会创建新的线程来处理新任务，否则就会利用空闲的线程来处理新任务。线程池中的空闲
线程都有超时机制，这个超时时长为60秒，超过60秒闲置线程就会被回收。
    和FixedThreadPool不同的是，CacheThreadPool的任务队列其实相当于一个空集合，这将导致任何任务都会立即被
执行，因为在这种场景下SynchronousQueue是无法插入任务的。
    SynchronousQueue是一个非常特殊的队列，在很多情况下可以把他简单理解为一个无法存储元素的队列，由于他在实际
中较少使用，这里就不深入探讨它了。
    从CacheThreadPool的特性来看，这类线程池比较适合执行大量的耗时较少的任务。当整个线程池都处于闲置状态时，
线程池中的线程都会超时而停止，这个时候CacheThreadPool之中实际上是没有任务线程的，它几乎是不占用任何系统资源的。

    public static ExecutorService newCachedThreadPool() {
            return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                          60L, TimeUnit.SECONDS,
                                          new SynchronousQueue<Runnable>());
    }

（3）ScheduledThreadPool:
    通过Executors的newScheduledThreadPool方法来创建。它的核心线程数量是固定的，而非核心线程数量是没有限制的，
并且当非核心线程闲置时会被立即回收。
    ScheduledThreadPool这类线程池主要用于执行定时任务和具有固定周期的重复任务。
    newScheduledThreadPool方法的实现如下所示：

    public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {
        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                      60L, TimeUnit.SECONDS,
                                      new SynchronousQueue<Runnable>(),
                                      threadFactory);
    }

（4）SingleThreadExecutor：
    通过Executors的newSingleThreadExecutor方法来创建。
    这类线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行。SingleThreadExecutor的意义
在于统一所有的外界任务到一个线程中，这使得在这些任务之间不需要处理线程同步的问题。
    newSingleThreadExecutor方法的实现如下所示：

    public static ExecutorService newSingleThreadExecutor() {
        return new FinalizableDelegatedExecutorService
             (new ThreadPoolExecutor(1, 1,
                                     0L, TimeUnit.MILLISECONDS,
                                     new LinkedBlockingQueue<Runnable>()));
     }