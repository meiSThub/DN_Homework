建造者模式（Builder):将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。

UML图解析：
建造者模式的角色定义，在建造者模式中存在以下4个角色：
　　builder:为创建一个产品对象的各个部件指定抽象接口（定义如何创建产品对象的一个个部件的接口），
            复杂对象由这些部件组成。
　　ConcreteBuilder:实现Builder的接口以构造和装配该产品的各个部件，即具体实现各个部件的创建。
        创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。
        （1）通过具体完成接口Builder来构建或装配产品的部件；
        （2）定义并明确它所要创建的是什么具体东西；
        （3）提供一个可以重新获取产品的接口。
　　Director:构造一个使用Builder接口的对象，指导构建过程，即如何将部件最后组装成成品。
　　Product:表示被构造的复杂对象。

建造者模式在使用过程中可以演化出多种形式：
    如果具体的被建造对象只有一个的话，可以省略抽象的Builder和Director，
    让ConcreteBuilder自己扮演指导者和建造者双重角色，甚至ConcreteBuilder也可以放到Product里面实现。
    在Android中AlertDialog的Builder类就采用了建造者模式，而且Builder承担了指导者和建造者双重角色。
    在《Effective Java》书中第二条，就提到“遇到多个构造器参数时要考虑用构建器”，
    其实这里的构建器就属于建造者模式，只是里面把四个角色都放到具体产品里面了。