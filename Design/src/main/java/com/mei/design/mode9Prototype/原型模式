原型模式(Prototype):用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
    原型模式其实就是从一个对象再创建另外一个可定制的对象，而且不需要知道任何创建的细节。

概述：
　　通过复制一个已经存在的实例来创建一个新的实例。被复制的实例被称为原型，这个原型是可定制的。
模式中的角色：
    抽象原型类（Abstract Prototype）：提供一个克隆接口
    具体原型类（Concrete Prototype）: 及实现了克隆接口方法的具体原型类


uml图解析：
    这种形式涉及到三个角色：
　　（1）客户(Client)角色：客户类提出创建对象的请求。
　　（2）抽象原型(Prototype)角色：这是一个抽象角色，通常由一个Java接口或Java抽象类实现。
        此角色给出所有的具体原型类所需的接口。
　　（3）具体原型（Concrete Prototype）角色：被复制的对象。此角色需要实现抽象的原型角色所要求的接口。


原型模式主要用于对象的复制，它的核心是就是类图中的原型类Prototype。Prototype类需要具备以下两个条件：
    （1）实现Cloneable接口。在java语言有一个Cloneable接口，它的作用只有一个，就是在运行时通知虚拟机
        可以安全地在实现了此接口的类上使用clone方法。在java虚拟机中，只有实现了这个接口的类才可以被拷贝，
        否则在运行时会抛出CloneNotSupportedException异常。
    （2）重写Object类中的clone方法。Java中，所有类的父类都是Object类，Object类中有一个clone方法，
        作用是返回对象的一个拷贝，但是其作用域protected类型的，一般的类无法调用，因此，Prototype类
        需要将clone方法的作用域修改为public类型。
原型模式是一种比较简单的模式，也非常容易理解，实现一个接口，重写一个方法即完成了原型模式。在实际应用中，
原型模式很少单独出现。经常与其他模式混用，他的原型类Prototype也常用抽象类来替代。


优点：
　　隐藏了对象的创建细节，对有些初始化需要占用很多资源的类来说，对性能也有很大提高。
　　在需要新对象时，可以使用Clone来快速创建创建一个，而不用使用new来构建。
缺点：
　　每一个类都需要一个Clone方法，而且必须通盘考虑。对于深拷贝来说，每个关联到的类型都不许实现IClonable接口，
    并且每增加或修改一个字段是都需要更新Clone方法。
适用场景：
　　类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等
　　通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式
　　一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。

原型模式的注意事项：
    （1）使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，
        因此不会调用到类的构造方法。不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。单例模式中，只要将构造方法的
        访问权限设置为private型，就可以实现单例。但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，
        在使用时要特别注意。
    （2）深拷贝与浅拷贝。Object类的clone方法只会拷贝对象中的基本的数据类型（8种基本数据类型byte,char,short,int,long,float,double，boolean），
    对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。例如：

推荐博客：http://blog.csdn.net/zhangjg_blog/article/details/18369201