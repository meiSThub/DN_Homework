装饰模式（Decorator):动态地给一个对象添加一些额外的职责，
                    就增加功能来说，装饰模式比生成子类更为灵活。

    即对被装饰对象某一个方法的扩展，装饰类和被装饰类实现共同的接口或者父类，并实现
相同的方法（假设是decorator()），在装饰类中，调用被装饰类的decorator()方法，并实现具体
的装饰功能，则在装饰类中，会用接口的引用接收被装饰对象，即调用的decorator()方法是具体的
被装饰对象的，从而实现了对被装饰对象decorator()方法的扩充。

    装饰模式就是对已有功能（方法）的动态地添加更多功能的一种方式，但新的功能不是直接在
原有类中添加，而是通过装饰类来添加，符合开闭原则。