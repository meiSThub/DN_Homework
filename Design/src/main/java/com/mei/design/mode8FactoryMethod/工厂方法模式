工厂方法模式（Factory Method）:定义一个用于创建对象的接口，让子类决定实例化哪一个类，
    工厂方法使一个类的实例化延迟到其子类。

简单工厂模式：会有很多个工厂类，不符合开闭原则。
工厂方法模式：只有一个工厂类，    符合开闭原则。

假设在一个类中通过简单工厂创建了三个对象：
    Object1=SimpleFactory.createInstance("A");
    .........................................
    Object1=SimpleFactory.createInstance("A");
    .........................................
    Object1=SimpleFactory.createInstance("A");
如果现在要切换实例化的对象，则需要改三个地方的代码,如下,把实例化A的代码都需要改成实例化B的代码：
    Object1=SimpleFactory.createInstance("B");
    .........................................
    Object1=SimpleFactory.createInstance("B");
    .........................................
    Object1=SimpleFactory.createInstance("B");

如果使用的时工厂方法模式实现上面的功能：
    FactoryMethodA factoryA=new FactoryMethodA();
    Object1=factoryA.createInstance();
    .....................................
    Object1=factoryA.createInstance();
    .....................................
    Object1=factoryA.createInstance();
切换实例化的对象,只需要修改一处代码就可以了，即只需要把FactoryMethodA换成FactoryMethodB即可，
其他均不用变动：
    FactoryMethodB factoryA=new FactoryMethodB();
    Object1=factoryA.createInstance();
    .....................................
    Object1=factoryA.createInstance();
    .....................................
    Object1=factoryA.createInstance();

uml图解释：
    Product:定义工厂方法所创建的对象的接口
    Factory：声明工厂方法，该方法返回一个Product类型的对象
    ProductA,ProductB:具体的产品，实现了Product接口
    FactoryA,FactoryB:具体的工厂方法类,实现了Factory接口

使用步骤：
步骤1： 创建抽象工厂类，定义具体工厂的公共接口；
步骤2： 创建抽象产品类 ，定义具体产品的公共接口；
步骤3： 创建具体产品类（继承抽象产品类） & 定义生产的具体产品；
步骤4：创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；
步骤5：外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例


优点:
    (1)更符合开-闭原则
        新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可
            简单工厂模式需要修改工厂类的判断逻辑
    (2)符合单一职责原则
        每个具体工厂类只负责创建对应的产品
            简单工厂中的工厂类存在复杂的switch逻辑判断
    (3)不使用静态工厂方法，可以形成基于继承的等级结构。
        简单工厂模式的工厂类使用静态工厂方法
    总结：工厂模式可以说是简单工厂模式的进一步抽象和拓展，在保留了简单工厂的封装优点的同时，
          让扩展变得简单，让继承变得可行，增加了多态性的体现。

缺点:
    (1)添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，
        在一定程度上增加了系统的复杂度；
    (2)同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；
    (3)由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，
        增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。
    (4)虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，
        仍然需要修改实例化的具体工厂类；
    (5)一个具体工厂只能创建一种具体产品